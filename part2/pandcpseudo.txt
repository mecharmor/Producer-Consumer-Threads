Author: Cory Lewis
Date: 5/4/19

Pseudo for Queue:
-Create an array to use in enqueue and dequeue.
-Keep counter of items inside dequeue_item
-enqueue takes the array counter+1 and saves the value
-dequeue saves first element in array and copies all other elements over by one. counter is decremeneted by 1.
  -return removed item.

Pseudo for producer Consumer
-check if argument count is 7. else print expected input and sample data.
-print timestamp
-set N, P, C, X, Ptime, and Ctime global variables (reading from arg** in main)
-initialize semaphores.
- loop through P times to create producer threads.
- loop through C times to create consumer threads.
- producer thread enqueue's data
- consumer thread dequeue's data
-join consumer and producer threads
-print table
-destroy semaphores
-get current time
-compare consumer and producer arrays to make sure they are the same
-print runtime

Applying Semaphores and Mutex to Producer/Consumer
-Semaphore of Full Needed, set to N or buffer size, sem_t Full
-Semaphore of Empty Needed, set to 0. sem_t Empty
-Mutex needed when reading or writing to buffer (critical section)
